// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:morty_api/api/morty_api_entity.dart';
import 'package:morty_api/generated/json/morty_api_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case MortyApiEntity:
        return mortyApiEntityFromJson(data as MortyApiEntity, json) as T;
      case MortyApiInfo:
        return mortyApiInfoFromJson(data as MortyApiInfo, json) as T;
      case MortyApiResults:
        return mortyApiResultsFromJson(data as MortyApiResults, json) as T;
      case MortyApiResultsOrigin:
        return mortyApiResultsOriginFromJson(
            data as MortyApiResultsOrigin, json) as T;
      case MortyApiResultsLocation:
        return mortyApiResultsLocationFromJson(
            data as MortyApiResultsLocation, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case MortyApiEntity:
        return mortyApiEntityToJson(data as MortyApiEntity);
      case MortyApiInfo:
        return mortyApiInfoToJson(data as MortyApiInfo);
      case MortyApiResults:
        return mortyApiResultsToJson(data as MortyApiResults);
      case MortyApiResultsOrigin:
        return mortyApiResultsOriginToJson(data as MortyApiResultsOrigin);
      case MortyApiResultsLocation:
        return mortyApiResultsLocationToJson(data as MortyApiResultsLocation);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (MortyApiEntity).toString()) {
      return MortyApiEntity().fromJson(json);
    } else if (type == (MortyApiInfo).toString()) {
      return MortyApiInfo().fromJson(json);
    } else if (type == (MortyApiResults).toString()) {
      return MortyApiResults().fromJson(json);
    } else if (type == (MortyApiResultsOrigin).toString()) {
      return MortyApiResultsOrigin().fromJson(json);
    } else if (type == (MortyApiResultsLocation).toString()) {
      return MortyApiResultsLocation().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<MortyApiEntity>[] is M) {
      return data
          .map<MortyApiEntity>((e) => MortyApiEntity().fromJson(e))
          .toList() as M;
    } else if (<MortyApiInfo>[] is M) {
      return data.map<MortyApiInfo>((e) => MortyApiInfo().fromJson(e)).toList()
          as M;
    } else if (<MortyApiResults>[] is M) {
      return data
          .map<MortyApiResults>((e) => MortyApiResults().fromJson(e))
          .toList() as M;
    } else if (<MortyApiResultsOrigin>[] is M) {
      return data
          .map<MortyApiResultsOrigin>(
              (e) => MortyApiResultsOrigin().fromJson(e))
          .toList() as M;
    } else if (<MortyApiResultsLocation>[] is M) {
      return data
          .map<MortyApiResultsLocation>(
              (e) => MortyApiResultsLocation().fromJson(e))
          .toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
